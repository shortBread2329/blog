[{"content":"「トランス脂肪酸低減に取り組んでいます」と書かれているマーガリンをここ数年みます。\n私も何となくよくないのだなと思って、マーガリンや菓子パン、ポテトチップスなど控えるようにしてましたが、\n何となくではなくちゃんと知ろうと思い、調査してみましたので皆さんにも共有します。\nトランス脂肪酸のネット上でよく見る情報 トランス脂肪酸は、食品からとる必要がないと考えられています。\n日常的にトランス脂肪酸を多くとりすぎている場合には、少ない場合と比較して心臓病のリスクが高まることなどの悪影響が最近話題としてよく取り上げられています。\nトランス脂肪酸は体に何をしているのか 体内に入ると善玉菌コレステロールを減らし、悪玉菌コレステロールを増やしています。\nトランス脂肪酸を多く摂取し、悪玉菌コレステロールが増えることで心臓病のリスクが増えるということのようですが、それにより動脈硬化が進むことで、心臓病や免疫低下、アレルギー疾患、発がん性などの発生との関連が疑われているそうです。\nトランス脂肪酸に関する国の対応 アメリカ 2015年、「米食品医療局（FDA）」は人工的なトランス脂肪酸について、心臓発作との関連など健康への害があると判断し、\nトランス脂肪酸の使用を、2018年6月18日から原則禁止\n日本 トランス脂肪酸による健康への悪影響を示す研究の多くは欧米人を対象としたものなので、日本人の場合にも同じ影響があるのかはわからない。\n食品にトランス脂肪酸が含まれているかの表示義務はない。\n日本生協連は、食事からの脂肪のとり方について「トランス脂肪酸を減らすことだけにこだわるのではなく、脂肪を適切な量をとることと、農産物や魚介類も含めたいろいろな食べ物からバランスよく脂肪をとること」をおすすめします。\nそのほかの国 カナダ、ブラジル、中国、韓国などではトランス脂肪酸を含む食品に表示が義務づけられている\nつまり、トランス脂肪酸を一言で言うと 悪玉菌コレステロールを増やす油。\n個人的な結論 日本生協連様の意見と一致しているのですが、トランス脂肪酸を減らすことだけにこだわるわけではなく、脂肪を適切な量取り、バランスよくいろいろな食品を食べることがよいのかなと思います。\nトランス脂肪酸の摂取を控えるために替えた食品 なんとなくで約3年ほどは継続しています。その代わりお菓子類はOKとしているので完全に摂取を抑えられているわけではないです。個人的にはサラダ油だけ替えるだけでも摂取を控えられるのではと思います。\n  マーガリンからバターへ\n  菓子パンは購入をすべてやめてみました。\n  サラダ油→ひまわり油\n  参考リンク 農林水産省_すぐにわかるトランス脂肪酸\n日本生協連_トランス脂肪酸問題についてのQ\u0026amp;A\n","date":"2021-08-23T09:04:14+09:00","image":"https://shortbread2329.github.io/p/%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B9%E8%84%82%E8%82%AA%E9%85%B8%E3%81%AE%E7%96%91%E5%95%8F%E3%81%BE%E3%81%A8%E3%82%81/image-20210823102706931_hud84f78707afe06b52f9058a14103f6bd_354861_120x120_fill_box_smart1_2.png","permalink":"https://shortbread2329.github.io/p/%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B9%E8%84%82%E8%82%AA%E9%85%B8%E3%81%AE%E7%96%91%E5%95%8F%E3%81%BE%E3%81%A8%E3%82%81/","title":"トランス脂肪酸の疑問まとめ"},{"content":"特定のURLでブラウザを起動する Java\ndriver.get(\u0026quot;URL\u0026quot;); C#\ndriver.Url = \u0026quot;URL\u0026quot;; Python\ndriver.get(\u0026quot;URL\u0026quot;) Ruby\ndriver.get(\u0026quot;URL\u0026quot;) ページ遷移したいとき Java\ndriver.navigate().to(\u0026quot;URL\u0026quot;); C#\ndriver.Navigate().GoToUrl(\u0026quot;URL\u0026quot;); Python\ndriver.get(\u0026quot;URL\u0026quot;) Ruby\ndriver.navigate.to(\u0026quot;URL\u0026quot;) 一つ前に戻りたいとき Java\ndriver.navigate().back(); C#\ndriver.Navigate().Back(); Python\ndriver.back() Ruby\ndriver.navigate.back 一つ前に進みたいとき Java\ndriver.navigate().forward(); C#\ndriver.Navigate().Forward(); Python\ndriver.forward() Ruby\ndriver.navigate.forward ブラウザを更新する Java\ndriver.navigate().refresh(); C#\ndriver.Navigate().Refresh(); Python\ndriver.refresh() Ruby\ndriver.navigate.refresh 現在のURLを知りたいとき Java\ndriver.getCurrentUrl() C#\ndriver.Url; Python\ndriver.current_url Ruby\ndriver.current_url タイトルを知りたいとき Java\ndriver.getTitle(): C#\ndriver.Title; Python\ndriver.title Ruby\ndriver.title ページのソースを取得したいとき Java\ndriver.getPageSource(); C#\ndriver.PageSource; Python\ndriver.page_source Ruby\ndriver.page_source ウインドウを閉じたいとき Java\ndriver.close(); C#\ndriver.Close(); Python\ndriver.close() Ruby\ndriver.close すべてのウインドウを閉じたいとき Java\ndriver.quit(); C#\ndriver.Quit(); Python\ndriver.quit() Ruby\ndriver.quit ある要素を取得したいとき Java\ndriver.findElement(By.className(\u0026quot;classname\u0026quot;)); //classでの指定 driver.findElement(By.id(\u0026quot;id\u0026quot;)); //idでの指定 driver.findElement(By.xpath(\u0026quot;xpath\u0026quot;)); //xpathでの指定 C#\ndriver.FindElement(By.ClassName(\u0026quot;classname\u0026quot;)); //classでの指定 driver.FindElement(By.Id(\u0026quot;id\u0026quot;)); //idでの指定 driver.FindElement(By.Xpath(\u0026quot;xpath\u0026quot;)); //xpathでの指定 Python\ndriver.find_element_by_class_name(\u0026quot;classname\u0026quot;) # classでの指定 driver.find_element_by_id(\u0026quot;id\u0026quot;) # idでの指定 driver.find_element_by_xpath(\u0026quot;xpath\u0026quot;) # xpathでの指定 Ruby\ndriver.find_element(:class, \u0026quot;classname\u0026quot;) # classでの指定 driver.find_element(:id, \u0026quot;id\u0026quot;) # idでの指定 driver.find_element(:xpath, \u0026quot;xpath\u0026quot;) # xpathでの指定 ある要素をクリックしたいとき Java\ndriver.findElement(By.XPath(\u0026quot;XPATH\u0026quot;)).click(); C#\ndriver.FindElement(By.XPath(\u0026quot;XPATH\u0026quot;)).Click(); Python\ndriver.find_element_by_xpath(\u0026quot;XPATH\u0026quot;).click() Ruby\ndriver.find_element(:xpath, \u0026quot;XPATH\u0026quot;).click ある要素までスクロールしたいとき Java\nWebElement element = driver.findElement(By.id(\u0026quot;ID\u0026quot;)); Actions actions = new Actions(driver); actions.moveToElement(element); actions.perform(); C#\nvar element = driver.FindElement(By.id(\u0026quot;ID\u0026quot;)); Actions actions = new Actions(driver); actions.MoveToElement(element); actions.Perform(); Python\nfrom selenium.webdriver.common.action_chains import ActionChains element = driver.find_element_by_id(\u0026quot;ID\u0026quot;) actions = ActionChains(driver) actions.move_to_element(element) actions.perform() Ruby\ndriver.find_element(:id, \u0026quot;ID\u0026quot;).location_once_scrolled_into_view ドロップダウンを選択したいとき ※Select Supportをimportする必要あり。\nJava\nelement = driver.findElement(By.xpath(\u0026quot;xpath\u0026quot;)); Select(element).selectByIndex(indexnum); // indexで選択 Select(element).selectByValue(\u0026quot;value\u0026quot;); // valueの値 Select(element).selectByVisibleText(\u0026quot;text\u0026quot;); // 表示テキスト C#\nelement = driver.FindElement(By.Xpath(\u0026quot;xpath\u0026quot;)); Select(element).SelectByIndex(indexnum); // indexで選択 Select(element).SelectByValue(\u0026quot;value\u0026quot;); // valueの値 Select(element).SelectByText(\u0026quot;text\u0026quot;); // 表示テキスト Python\nelement = driver.find_element_by_xpath(\u0026quot;xpath\u0026quot;) Select(element).select_by_index(indexnum) # indexで選択 Select(element).select_by_value(\u0026quot;value\u0026quot;) # valueの値 Select(element).select_by_visible_text(\u0026quot;text\u0026quot;) # 表示テキスト Ruby\nelement = driver.find_element(:xpath, \u0026quot;xpath\u0026quot;) Select(element).select_by(:index, indexnum) # indexで選択 Select(element).select_by(:value, \u0026quot;value\u0026quot;) # valueの値 Select(element).select_by(:text, \u0026quot;string\u0026quot;) # 表示テキスト テキストを入力したいとき Java\ndriver.findElement(By.id(\u0026quot;ID\u0026quot;)).sendKeys(\u0026quot;string\u0026quot;); C#\ndriver.FindElement(By.id(\u0026quot;ID\u0026quot;)).SendKeys(\u0026quot;string\u0026quot;); Python\ndriver.find_element_by_id(\u0026quot;ID\u0026quot;).send_keys(\u0026quot;strings\u0026quot;) Ruby\ndriver.find_element(:id, \u0026quot;ID\u0026quot;).send_keys(\u0026quot;strings\u0026quot;) テキストを取得したいとき Java\ndriver.findElement(By.id(\u0026quot;ID\u0026quot;)).getText(); C#\ndriver.FindElement(By.id(\u0026quot;ID\u0026quot;)).Text; Python\ndriver.find_element_by_id(\u0026quot;ID\u0026quot;).text Ruby\ndriver.find_element(:id, \u0026quot;ID\u0026quot;).text 属性を取得したいとき Java\ndriver.findElement(By.id(\u0026quot;ID\u0026quot;)).getAttribute(\u0026quot;value\u0026quot;); C#\ndriver.FindElement(By.id(\u0026quot;ID\u0026quot;)).GetAttribute(\u0026quot;value\u0026quot;); Python\ndriver.find_element_by_id(\u0026quot;ID\u0026quot;).get_attribute(\u0026quot;value\u0026quot;) Ruby\ndriver.find_element(:id, \u0026quot;ID\u0026quot;).attribute(\u0026quot;value\u0026quot;) アラートをハンドリングしたいとき Java\ndriver.switchTo().alert().accept(); C#\ndriver.SwitchTo().Alert().Accept(); Python\nAlert(driver).accept() Ruby\ndriver.switch_to.alert.accept ウインドウサイズを最大にしたいとき Java\ndriver.manage().window().maximize(); C#\ndriver.Manage().Window().Maximize(); Python\ndriver.maximize_window() Ruby\ndriver.manage.window.maximize 要素が表示されているかどうかを判定したいとき Java\ndriver.findElement(By.xpath(\u0026quot;xpath\u0026quot;)).isDisplayed(); C#\ndriver.FindElement(By.Xpath(\u0026quot;xpath\u0026quot;)).Displayed(); Python\ndriver.find_element_by_xpath(\u0026quot;xpath\u0026quot;).is_displayed() Ruby\ndriver.find_element(:xpath, \u0026quot;xpath\u0026quot;).displayed? 要素が有効かどうかを判定したいとき Java\ndriver.findElement(By.xpath(\u0026quot;xpath\u0026quot;)).isEnabled(); C#\ndriver.FindElement(By.Xpath(\u0026quot;xpath\u0026quot;)).Enabled(); Python\ndriver.find_element_by_xpath(\u0026quot;xpath\u0026quot;).is_enabled() Ruby\ndriver.find_element(:xpath, \u0026quot;xpath\u0026quot;).enabled? 要素が選択されているかどうかを判定したいとき Java\ndriver.findElement(By.xpath(\u0026quot;xpath\u0026quot;)).isSelected(); C#\ndriver.FindElement(By.Xpath(\u0026quot;xpath\u0026quot;)).Selected(); Python\ndriver.find_element_by_xpath(\u0026quot;xpath\u0026quot;).is_selected() Ruby\ndriver.find_element(:xpath, \u0026quot;xpath\u0026quot;).selected? おわりに 間違ったものがあればご指摘頂ければ幸いです。 要望があれば随時追加していきます。 他にもみなさんが使うよく使いそうなメソッドがあれば教えてください。\n","date":"2021-08-09T23:35:50+09:00","permalink":"https://shortbread2329.github.io/p/seleniumwebdriver%E3%83%81%E3%83%BC%E3%83%88%E3%82%B7%E3%83%BC%E3%83%88/","title":"SeleniumWebdriverチートシート"},{"content":"勉強などの作業をしているとこの時期はアイスコーヒーが進んでしまいますよね。\nうっかり飲みすぎてカフェインの取りすぎが気になるそんなあなたに、\nおうちで豆乳ドリンクを作ってみてはどうでしょうか！？\n作り方 材料を以下の順で入れ、溶け切るまで混ぜます。  黒糖(または黒蜜)　大匙1 きなこ 大匙2 豆乳　200cc(コップ1杯ぐらい)  コップの表面に追いきなこをトッピングして完成です。  きなこ　好きなだけ  アレンジ例  トッピング前にマシュマロを載せ、レンジで温めトッピングすると、冬もホットでおいしくいただけます。 粉プロテインがとりたい場合は以下の分量に変更しシェイカーで混ぜるとよく溶けます。  黒糖　大匙１ きなこ　大匙２ 粉プロテインプレーン　1杯の分量通り 水　100cc 豆乳　100cc    ","date":"2021-08-08T01:45:14+09:00","image":"https://shortbread2329.github.io/p/%E8%B1%86%E4%B9%B3%E3%81%8D%E3%81%AA%E3%81%93%E3%83%A9%E3%83%86/2021-08-08-18-37-11-255_hua9d4ab170bae59ab64eb3a42bd031ce0_1199086_120x120_fill_q75_box_smart1.jpg","permalink":"https://shortbread2329.github.io/p/%E8%B1%86%E4%B9%B3%E3%81%8D%E3%81%AA%E3%81%93%E3%83%A9%E3%83%86/","title":"豆乳きなこラテ"},{"content":"googleアナリティクスとは基本無料のサイト解析サービスでして、\n登録したサイトへアクセスしたユーザーがとった行動に関するデータが見れます。例えば、\n「サイトの訪問者数はどれくらいか」\n「どのページがよく見られているのか」\n「訪問者はどこから来たのか」\n「使われたデバイスはスマホかパソコンか」\nなどなどです。\ngoogleアナリティクスの始め方 1) Googleアカウントを作成しログインしておく とはいっても既に持っている人が多いと思うので割愛します。\n2) Googleアナリティクスアカウントを作成 次にGoogleアナリティクスアカウントを作成します。ここでは分析したいサイトのURLなどを入力し、トラッキングコードと呼ばれるタグを取得します。 このトラッキングコードをページのHTMLに設置し、それが読み込まれることで、Googleアナリティクスでデータを計測できるようになります。\n3) トラッキングコードを設置 最後に、先ほど取得したトラッキングコードを全てのページに設置します。\nまたHUGOでブログを作っている方は、トラッキングコード内のトラッキングIDをコピーし「config.yaml」などのconfigファイルに以下を追記しコンパイルすると完了します。\n# GA Tracking IDgoogleAnalytics:\u0026#34;UA-123456789-1\u0026#34;#トラッキングIDを入力Googleアナリティクスの使い方 | 必須の4機能 導入が完了したら、実際にGoogleアナリティクスを使ってみましょう。 Googleアナリティクスは項目が多くて一見複雑そうですが、実はチェックするべき機能はたったの4つです。 以下では、「ユーザー」「集客」「行動」「コンバージョン」という基本的な機能について概要を説明していきます。\n1) 「ユーザー」メニュー まずは「ユーザー」です。 このメニューでは、サイトの訪問数(セッション数)やページビュー数、使用しているデバイスなど、ユーザーに関する幅広いデータを見ることができます。\nまずは「概要」をクリックしてみてください。\n image-20210805113010113 \nアクセス解析において、まずはこの「概要」ページでサイト全体の訪問者数を確認することがはじめの一歩となります。 その後ページ毎の分析の際にも、サイト全体の平均と比べてどうなのか、という視点が大事です。 アクセス解析において最もお世話になるのがこの「概要」メニューと言っても差し支えないでしょう。\n次に、「モバイル」\u0026gt;「概要」をクリックしてみてましょう。\n image-20210805113032306 \nここではユーザーの使用しているデバイス(パソコン・スマホ)が何なのかがわかります。 この項目をきちんとチェックすることで、施策の優先度を見極めることができます。 たとえばスマホユーザーが多いので、スマホ用サイトを優先的に改善するなどの意思決定ができます。\n2) 「集客」メニュー 「集客」メニューでは、ユーザーサイトにどこから訪れたかがわかります。 具体的には、「Google検索で流入した」「Facebook広告から流入した」などがわかります。\n「集客」\u0026gt;「すべてのトラフィック」\u0026gt;「チャネル」を確認してみましょう。\n image-20210805113057889 \n「集客」チャネルでは以下のデータを確認することができます。\n   Organic Search Google、Yahooなどで検索してサイトに流入した訪問     Paid Search 検索後、リスティング広告などをクリックしてサイトに流入した訪問   Direct URLを直接入力したり、ブックマークからサイトに流入した訪問   Referral 他のサイトのリンクをクリックしてサイトに流入した訪問   Social FacebookやTwitterなどのSNSからサイトに流入にした訪問   Display バナー広告をクリックしてサイトに流入した訪問   Other その他    3) 「行動」メニュー 「集客」メニューがユーザーのサイト訪問前の行動を確認するために役立つのに対して、「行動」メニューではユーザーのサイト内での行動データをチェックできます。 まずは「サイトコンテンツ」\u0026gt;「すべてのページ」を見てみましょう。\n 「サイトコンテンツ」\u0026gt;「すべてのページ」 \nサイト内のすべてのページのPV数やセッション数などを確認することができます。\n次に「サイトコンテンツ」\u0026gt;「ランディングページ」をクリックしてみましょう。\n 「サイトコンテンツ」\u0026gt;「ランディングページ」をクリック \nここではランディングページごとのセッション数などが見られます。 ランディングページとは、サイトに流入したときの最初のページで、サイトの入口となるページのことです。\n4) 「コンバージョン」メニュー コンバージョンとは、会員登録や商品購入など、そのサイトの目標のことです。 「コンバージョン」メニューでは、このコンバージョンの数を見ることができます。\n 「コンバージョン」メニュー \nアクセス解析やサイト改善はこのコンバージョンを増やすための手段です。常にチェックしておきましょう。\n","date":"2021-08-05T10:27:45+09:00","image":"https://shortbread2329.github.io/p/%E3%81%93%E3%81%AE%E3%83%96%E3%83%AD%E3%82%B0%E3%81%ABgoogle%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B9%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/image-20210805114251653_hu298f8af8a273c365e2bd91407742fd3c_417502_120x120_fill_box_smart1_2.png","permalink":"https://shortbread2329.github.io/p/%E3%81%93%E3%81%AE%E3%83%96%E3%83%AD%E3%82%B0%E3%81%ABgoogle%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B9%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/","title":"このブログにGoogleアナリティクスを導入してみた"},{"content":"投資データなどの分析をしてみたいなあと考えて調べてまとめてみました。\n用途別で記載しています。\n仮説を立ててみる 一見関連性のない複数の事象が共起している場合、そこに何かしらの要因が隠れていることが多いです。これをアソシエーション分析と言います。\n例えば、「紙おむつとビールが同時に購入される確率がなぜか多い」や「Webサイトで会員登録するユーザーは登録前になぜかWikipediaを見ている可能性が高い」といった感じです。\nアソシエーション分析では複数の事象の関連性を見つけ出し、仮説を立て、経営戦略やマーケティングに活かすことが出来ます。\nアンケートを取って分類する アンケート調査における設問に対し、回答者の属性などの項目を交えて集計するデータ分析手法です。クロス集計分析と言います。\nクロス集計分析を用いることでユーザーの属性ごとの平均値を知ることが出来ます。\n複数のデータを要約する いくつかの変数を組み合わせて、少数の変数にまとめる手法です。主成分分析と呼ばれ、データを要約するのに用いられる代表的な手法です。\nこの変数を組み合わせることを、変数を合成するといいます。そして合成されて新しくできた変数を主成分と呼びます。下図は主成分分析のイメージ図です。ピンク部分を作り出すのが、主成分分析のゴールになります。\n","date":"2021-08-04T13:24:53+09:00","image":"https://shortbread2329.github.io/p/%E7%94%A8%E9%80%94%E5%88%A5%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9/image-20210804135139308_hu322d823fed05bd5856f1c12661203506_367518_120x120_fill_box_smart1_2.png","permalink":"https://shortbread2329.github.io/p/%E7%94%A8%E9%80%94%E5%88%A5%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9/","title":"用途別、データ分析の考え方"},{"content":"2021年3月ごろ、楽天モバイルで1台1年無料につられスマホを契約したが、ロックを忘れて放置してしまっていた。\nこれによりマイナポイントを申請したモバイルPASMOが使えなくなりげんなり。\nしかし初期化してもモバイルPASMOは復旧できそうだと判断したため、\n初期化に挑戦するも、苦戦を強いられた。\nXperiaAce初期化の流れ https://xperia.sony.jp/support/use_support/manual/j3173/contents/TP0002433199.html?search=%E5%BF%98%E3%82%8C%E3%81%9F\nによると、\n パソコンにXperia Companionがインストールされていることを確認する。 Xperia Companionを起動し、［ソフトウェアの修復］をクリックする。 画面の指示に従ってソフトウェアの修復を完了する。  2[ソフトウェアの修復]の前でつまる スマホをUSB接続したときに、スマホ側がUSBを許可していないみたいでここからどうすればよいかわからなくなる。\nPCとスマホをどうやって接続するか https://knowledge.support.sony.jp/electronics/support/articles/S1603090078294\nの手順の通りに行うことで、\n音量下ボタンを押しながらUSB接続し、ソフトウェアの修復をすることができます。\nこれを使って初期状態にできました！\n","date":"2021-08-03T16:56:53+09:00","image":"https://shortbread2329.github.io/p/xperiaace%E3%82%92%E5%88%9D%E6%9C%9F%E5%8C%96%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%9F/smartphone_hu7d69ffaed68a5396b7a7903716bd276e_396511_120x120_fill_box_smart1_2.png","permalink":"https://shortbread2329.github.io/p/xperiaace%E3%82%92%E5%88%9D%E6%9C%9F%E5%8C%96%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%9F/","title":"XperiaAceを初期化しようとした"},{"content":"pythonで自作関数をモジュール化・パッケージ化 私がTwitterAPIを叩く処理を実装していた際にライブラリ化したくなったのでまとめてみます。\n前提条件  Python 3.0以上  構成ディレクトリ 以下のようなフォルダとファイルを作成していきます。\n./mylibrary --- /mylibrary ---/__init__.py file1.py file2.py --- /setup.py   mylibraryフォルダ\nライブラリ化したいソースをここに配置していきます。\n  _init_.py\nfrom .file1 import class1 from .file2 import class2 from .file3 import *   setup.py\nインストール時の構成を記述するファイルです。\nsetup.pyの書き方は、本来はもっといろいろと書くべきのようですが、\n今回は公開することを考えず最小限で行きます。\n  from setuptools import setup setup( install_requires=[], entry_points={ \u0026#34;console_scripts\u0026#34;:[ \u0026#34;myapp = test:ggg\u0026#34; ] } )  install_requires  importしている依存ライブラリをリストで羅列する \u0026ldquo;sys\u0026quot;など標準ライブラリを書くとエラーになる    完成したライブラリのインストール あとはライブラリをインストールするだけです.\npython setup.py install お疲れ様でした!\n","date":"2021-07-31T21:58:40+09:00","image":"https://shortbread2329.github.io/p/python%E3%81%A7%E8%87%AA%E4%BD%9C%E9%96%A2%E6%95%B0%E3%82%92%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E5%8C%96%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E5%8C%96/image-20210804134958029_hu60257403737ea4c7439040911418b521_352978_120x120_fill_box_smart1_2.png","permalink":"https://shortbread2329.github.io/p/python%E3%81%A7%E8%87%AA%E4%BD%9C%E9%96%A2%E6%95%B0%E3%82%92%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E5%8C%96%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E5%8C%96/","title":"pythonで自作関数をモジュール化・パッケージ化"},{"content":"ソース管理をするといえばGitとGithubが主流なのかなというご時世ですが、\nそもそもソースを管理できればいいだけで公開する必要はない時もあるかと思います。\nそんな時に実は簡単にできるので是非活用してみてください。\n リモートリポジトリを作成する(ローカル環境で) mkdir .git cd .git git init --bare --shared オプションの解説\n–bare：カレントディレクトリ配下のソースをリモートリポジトリにする。\n–share：このリポジトリを共有可能にする。\n​\n","date":"2021-07-18T00:10:06+09:00","image":"https://shortbread2329.github.io/p/%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AE%E3%81%BF%E3%81%AEgit%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8D%E3%81%86/image-20210804135308649_hu60257403737ea4c7439040911418b521_352978_120x120_fill_box_smart1_2.png","permalink":"https://shortbread2329.github.io/p/%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AE%E3%81%BF%E3%81%AEgit%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8D%E3%81%86/","title":"ローカルのみのGitリポジトリをつくろう"},{"content":"普段は最新のRubyを使っているけど、\nRuby on Railsなど環境によっては古いバージョンを使い分けたいときに。\n 環境  windows10 Ruby 2.6.3 2.7.3 uru 0.8.5   uru公式サイト: https://bitbucket.org/jonforums/uru/wiki/Home  uruを導入する uru の準備   使い分けたいバージョンのRubyをインストール\n メインで使う方のバージョン(ここでは2.6)のみパスを通すと便利 先に2.7のパスを通していた場合は環境変数を編集  参考: Qiita - Windows10で実行ファイルへのパスを通す手順      uru\nをダウンロードページからDL\n DLリンク: https://bitbucket.org/jonforums/uru/wiki/Downloads uru-0.x.x-windows-x86 をクリック    DLされた uru-0.x.x-windows-x86.7z を解凍\n  uru_rt.exeを適当なフォルダに移動\n ここでは C:\\Program Files\\uru に移動    コマンドラインで uru を使うため、移動した先へのパスを通す\n  コマンドラインで下記を実行\n$ uru_rt admin install ---\u0026gt; Installing uru into C:\\Program Files\\uru   同じフォルダに uru.bat, uru.ps1 が生成されていることを確認\n  Rubyのパスをuruに登録   コマンドラインで下記を実行(Ruby2.6パスを登録)\n# C:\\Ruby24-x64\\bin はRubyのDL先に合わせて変更 $ uru admin add C:\\Ruby24-x64\\bin ---\u0026gt; Registered ruby at `C:\\Ruby24-x64\\bin` as `263p62`   Ruby2.5も同様に登録\n  登録されたか確認\n  uru ls 263p62 : ruby 2.6.3p62 (2019-04-16 revision 67580) [x64-mingw32] 273p183 : ruby 2.7.3p183 (2021-04-05 revision 6847ee089d) [x64-mingw32] uruを使ってみる   現在はパスを通してある Ruby2.7.3 が使える状態\n$ ruby -v ruby 2.7.3p183 (2021-04-05 revision 6847ee089d) [x64-mingw32]   uru で Ruby2.6 に切り替え\n# \u0026quot;263p62\u0026quot; は \u0026quot;uru ls\u0026quot; で出てきた文字列 $ uru 263p62 ---\u0026gt; now using ruby 2.6.3p62 tagged as `263p62`   以降はコマンドライン実行中なら Ruby2.6 になります\n  $ ruby -v ruby 2.6.3p62 (2019-04-16 revision 67580) [x64-mingw32] .ruby-version ファイルでバージョン指定   .ruby-version ファイルを作成\n 普通にエクスプローラーで新規テキストファイルをリネームしようとすると「ファイル名を入力してください」と出てしまいます これはテキストエディタで新規保存時に名前を指定すると回避できます    .ruby-version ファイルには使いたいRubyバージョンのみを記載(Ruby2.6.3を使いたいとき)\n.ruby-version\n2.6.3   auto オプションを使うと .ruby-version に記載したバージョンに変更されます\n  $ uru auto ---\u0026gt; now using ruby 2.6.3p62 tagged as `263p62` ","date":"2021-07-04T00:10:04+09:00","image":"https://shortbread2329.github.io/p/windows%E3%81%A7%E7%95%B0%E3%81%AA%E3%82%8B%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%AEruby%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84/image-20210804135308649_hu60257403737ea4c7439040911418b521_352978_120x120_fill_box_smart1_2.png","permalink":"https://shortbread2329.github.io/p/windows%E3%81%A7%E7%95%B0%E3%81%AA%E3%82%8B%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%AEruby%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84/","title":"Windowsで異なるバージョンのRubyを使いたい"},{"content":"暑くなってきましたが、サラダでもいただけて、\n比較的ローストビーフよりお安くさっぱりいただける\nローストポークを作ってみてはいかがでしょうか！？\n作り方 まずジップロックに以下材料を入れ漬け込みます。 空気を抜いて閉めます。\n材料\n 豚ブロック肉　目安400g前後 粗塩　気持ち多め 砂糖　大匙2 ローズマリーみじん切り　適量  機材\n ジップロック  低温調理器にお水を張り、65度で2時間調理します。 機材\n  電気圧力鍋\n(今回はこちらを使用しました。https://www.t-fal.co.jp/products/electric-pressurecookers/manual-cooking/lakulacookercompact/)\n  まな板ので薄くスライスし、お好みでドレッシングや野菜を添えて完成です。 材料\n 玉ねぎドレッシング 市販の大根サラダ  ","date":"2021-07-02T00:10:12+09:00","image":"https://shortbread2329.github.io/p/%E3%83%AD%E3%83%BC%E3%82%B9%E3%83%88%E3%83%9D%E3%83%BC%E3%82%AF/2021-07-02-12-47-46-593_huf5e20b0ba7672043706a5223ab836ac7_1187582_120x120_fill_q75_box_smart1.jpg","permalink":"https://shortbread2329.github.io/p/%E3%83%AD%E3%83%BC%E3%82%B9%E3%83%88%E3%83%9D%E3%83%BC%E3%82%AF/","title":"ローストポーク"},{"content":"今ポートフォリオを作成しているんですけど、\nEC2でWebサーバーを立ててきました。\nその時のメモを記事にします。\nEC2とは AWSのサービスの1つで、「EC2（Amazon Elastic Compute Cloud）」は、AWSが提供する仮想サーバーです。読みは「イーシーツー」でいいみたいです。\nEC2は無料枠があります。\nEC2でWebサーバーを作成する それでは、実際にEC2でWebサーバーを作って試してみましょう。 以下の手順で行います。\n EC2インスタンスを作成する EC2にログインする EC2インスタンスの環境構築 サーバーに「Nginx」をインストールする ブラウザからWebサーバーにアクセスする Nginx用のHTMLを作成する サーバーを停止する  EC2インスタンスを作成する AWSにアクセスし、マネジメントコンソールのサービス検索で「EC2」を検索\n image-20210625085046607 \n【注意】\nサインアップが完了してから利用できるようになるまで、24時間ほどかかる場合があります。 この場合、「サービスへのお申し込みはあと少しで完了です！」画面が表示されます。 「AWSへの登録を完了してください」をクリックして登録を完了し、「クレジットカード情報」をクリックして情報を確認しておきましょう。\nEC2にアクセスされると、「EC2ダッシュボード」画面が表示されます。 左下の「インスタンスを起動」をクリックします。\n image-20210625085131485 \nAmazon マシンイメージにはAmazon Linux 2 AMIを選択します。\n image-20210625085202185 \n「2. インスタンスタイプの選択」画面が表示されます。\n「6.セキュリティグループの設定」をクリックします。\n image-20210625085350142 \n「6. セキュリティグループの設定」画面が表示されます。\n左下の「ルールの追加」をクリックします。\n image-20210625085451347 \n「ルールの追加」をクリックすると、その下に行が追加されます。\n追加行の「タイプ」で「カスタムTCP」をクリックし、表示されるメニューで「HTTP」を選択します。\n設定できたら、右下の「確認と作成」をクリックします。\n image-20210625085620944 \n「7. 確認」画面が表示されます。 正しく設定されていることを確認し、よければ右下の「起動」をクリックします。\n image-20210625085643864 \n「既存のキーペアを作成するか、新しいキーペアを作成します」画面が表示されます。\n「既存のキーペアの選択」のメニューで「新しいキーペアを作成」を選択し直します。\n「キーペア名」欄に好きなキーの名前入力し、右下の「キーペアのダウンロード」をクリックします。\nキーペアをダウンロードする画面が表示されるので、ダウンロードします。 ダウンロードが終わったら、「インスタンスの作成」をクリックします。\n image-20210625085730354 \n「作成ステータス」画面が表示されます。\n「インスタンスは現在作成中です」の右側にある番号（インスタンスID）をクリックします。\n「パブリックIPv4アドレス」のアドレスをコピーしておきます。\n image-20210625122734298 \nEC2にログインする ローカルコマンドラインから以下を入力します。\nssh -i キーパス ユーザ名(ec2-user)@コピーしたアドレス\n image-20210625124602159 \nEC2インスタンスの環境構築 パッケージのバージョンを管理するにはyumコマンドを使います。\nまずはyumコマンドでパッケージをアップデートします。\nsudo yum update 必要なパッケージをインストールします。\nAmazon LInuxは初期状態だと必要最低限のパッケージしか入っていません。\nなのでよく利用するパッケージをインストールしていきます。\n今回はRailsアプリが動くよう下記のパッケージをインストールします。\n   名前 役割     gcc-c++ c++のコンパイラ   make ソースコードからビルドできる   patch ファイルの修正や生成ができる   git バージョン管理ができる   curl データを転送できる   zlib-devel データの圧縮や伸張ができる   openssl-devel 通信を暗号化する   ImageMagick-devel 画像を操作したり表示できる   readline-devel CUIで行入力を支援してくれる   libcurl-devel curlを扱える   libffi-devel FFIの機能を扱える   libyaml-devel yamlファイルを扱える   libicu-devel Unicodeを扱える   libxml2-devel XMLを解析できる   libxslt-devel XMLにXSLを適用させる    インストールするコマンドは下記\nsudo yum -y install gcc-c++ make patch git curl zlib-devel openssl-devel ImageMagick-devel readline-devel libcurl-devel libffi-devel libicu-devel libxml2-devel libxslt-devel\nnodeをインストールします。\n# AWSのリポジトリに追加 curl -sL https://rpm.nodesource.com/setup_14.x | sudo bash - # インストール sudo yum -y install nodejs 次はrubyのバージョン管理ツールであるrbenvをインストールします。 下記のコマンドを実行します。\nEC2ターミナル | rbenvのインストール\n# レポジトリをクローンしてインストール  git clone https://github.com/sstephenson/rbenv.git ~/.rbenv # .bash_profileの設定  echo \u0026#39;export PATH=\u0026#34;$HOME/.rbenv/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile echo \u0026#39;eval \u0026#34;$(rbenv init -)\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile source .bash_profile 次はrubyをインストールするためのruby-buildをインストールします。\nEC2ターミナル | ruby-buildのインストール\ngit clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build これでrubyをインストールできるようになりました。\nssh-keygen -t rsa cat ~/.ssh/id_rsa.pub これら表示されている文字を最初の「ssh-rsa」から最後の「.internal」まで全てコピーしましょう。\nnginxをインストールします。\nsudo amazon-linux-extras install nginx1\n","date":"2021-06-25T08:23:29+09:00","permalink":"https://shortbread2329.github.io/p/aws%E3%81%A7web%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E7%AB%8B%E3%81%A6%E3%82%88%E3%81%86/","title":"AWSでWebサーバーを立てよう"},{"content":"キッシュを何度か作ったんですけど、\n卵の独特の後味？がしてしまい苦手かもしれないと思っていました。\nこれは私が正解を知らずに作ったのが間違え！だと思い、\nスタバで作業するついでにキッシュを頼んでみました。\n 食レポ 卵の独特の後味がありません！\nとっても具沢山ですね。サイコロ上のベーコンとポテトとほうれん草をすごく感じました。\nちょっとホワイトソースっぽいなあと感じて後で調べたらどうやらクリームチーズが使われているとこが特徴の一つみたいですね。\n今度自宅で再現に挑戦してみますので是非ご期待ください！\n リンク https://product.starbucks.co.jp/food/others/4524785438460/\n","date":"2021-06-22T15:42:56+09:00","image":"https://product.starbucks.co.jp/asset/202106220939-e88b8f/resource/products/images/4524785438460_1_l.jpg?ver=20210622","permalink":"https://shortbread2329.github.io/p/%E3%82%B9%E3%82%BF%E3%83%90%E3%81%A7%E3%82%AD%E3%83%83%E3%82%B7%E3%83%A5%E3%82%92%E9%A3%9F%E3%81%B9%E3%81%9F/","title":"スタバでキッシュを食べた"},{"content":"今回は無料の強力なMarkdowエディタ「Typora」について記事にします。\nTyporaはMarkdownエディタとして比較的敷居も低く、便利機能もたくさん存在するため、\n初心者から上級者までお勧めができるエディタです。\n Typoraの特徴  Win、Mac、Linuxで導入可能。 Typoraは常時シームレスにプレビューが可能なので、どのような表示になるのか確認しながら直感的に記述をすることが可能。 画像をドラックアンドドロップで楽々挿入 簡単なシーケンス図を作成可能。   環境要件 TyporaはWindows,Mac,Linux環境で動作します。\n詳しくはインストールの手順中リンクを参照してください。\n インストール https://typora.io\n 使い心地 このブログ記事もTyporaで書いてます。\n image-20210622104125318 \nなによりプレビュー画面と編集画面が一つでよい点が\n本当に使い心地よいです！！\n皆さんもぜひ使ってみてください。\n","date":"2021-06-22T09:58:59+09:00","permalink":"https://shortbread2329.github.io/p/typora_%E3%83%9E%E3%83%BC%E3%82%AF%E3%83%80%E3%82%A6%E3%83%B3%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF/","title":"Typora_マークダウンエディタ"},{"content":"朝簡単に作れる朝食です。\nオーブンのみなので洗い物が少ないです！\nラピュタ風トースト   食パンにトッピングを載せる。 食パンをくぼませる。\nマヨネーズを食パンの淵にかけ、卵が落ちないようにする。\n卵を割り、塩コショウをかける。\n 食パン　1枚 マヨネーズ　適量 卵　1個 塩コショウ　このみ    オーブン250度で12分焼きます。\n  完成！  2021-06-19-07-24-01-612 \n※写真は余ってたピザソースとパセリを追加トッピングしています。\n反省点 どろどろ半熟の状態で、黄身が流れてしまうので、\n焼き加減を改善したいなと思ってます。\nまたレシピが改善したら投稿しますのでぜひご期待ください！\n","date":"2021-06-19T00:14:59+09:00","image":"https://shortbread2329.github.io/p/%E3%83%A9%E3%83%94%E3%83%A5%E3%82%BF%E9%A2%A8%E3%83%88%E3%83%BC%E3%82%B9%E3%83%88/2021-06-19-07-24-01-612_hub0d85f176c6165ef53b8252be10f1aa8_1021325_120x120_fill_q75_box_smart1.jpg","permalink":"https://shortbread2329.github.io/p/%E3%83%A9%E3%83%94%E3%83%A5%E3%82%BF%E9%A2%A8%E3%83%88%E3%83%BC%E3%82%B9%E3%83%88/","title":"ラピュタ風トースト"},{"content":"そろそろ料理記事を投稿したかったのに、\n今日のランチは残り物をさらえてしまったので、\nスマホをあさっていたら見つけた。\n手作りミートソース  まず以下の材料をみじん切りって下ごしらえておきます。   セロリ　1本 玉ねぎ　半分 なにかしらキノコ(確かこれはエリンギ)　エリンギで1~2本   フライパンにバターを広げ熱し、強火で玉ねぎを入れます。\nしんなりしたかな(適当)ぐらいで、\nセロリと以下材料をぶちこんで火を通します。\nお肉に火が通っていたら次に行きます。\n   合いびき肉　こぶし2個分ぐらい？たぶん200g   以下の材料をぶちこみます。\nぶち込み終わったら中火ぐらいにして再沸騰するまで待ちます。\n私はそういえば電気圧力鍋で加圧8分で行った気がしてきました。\n   トマト缶　1缶 ニンニクチューブ　人差し指の長さぐらい 中濃ソース　大匙１　個人的にカゴメがおすすめ ケチャップ　大匙2 赤ワイン　コップ4分の1ぐらいだぼ×3ぐらい　安いやつでいい 砂糖　大匙1(安い赤ワインの場合は必須) ローリエ(ローレル???)　1枚   ローリエだかローレルだかを取り出し、\n仕上げに以下を入れて味見をして塩コショウを調整して完成。\n   ミックスビーンズ(あれば\t1パック 塩コショウ　気分(3振りぐらい 一味　適量  完成はこんな感じ。  2021-06-06-15-44-08-647 \nもしも電気圧力鍋をお持ちであれば、\nすべての材料を電気圧力鍋にぶち込んで加圧8分をすると、\n簡単にできます。\nたまにレトルトじゃなくて\n手作りが食べたくなるんですよねー\n是日試してみてください！！\n","date":"2021-06-06T00:07:29+09:00","image":"https://shortbread2329.github.io/p/%E3%82%B9%E3%83%9E%E3%83%9B%E3%81%AE%E5%86%99%E7%9C%9F%E3%82%92%E3%81%82%E3%81%95%E3%81%A3%E3%81%A6%E8%A8%98%E6%86%B6%E3%82%92%E9%A0%BC%E3%82%8A%E3%81%AB%E3%83%AC%E3%82%B7%E3%83%94%E3%82%92%E6%8A%95%E7%A8%BF%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B_%E3%83%9F%E3%83%BC%E3%83%88%E3%82%BD%E3%83%BC%E3%82%B9%E7%B7%A8/2021-06-06-15-44-08-647_hub56cc9f338467ae93422aa219e28cbc7_1409832_120x120_fill_q75_box_smart1.jpg","permalink":"https://shortbread2329.github.io/p/%E3%82%B9%E3%83%9E%E3%83%9B%E3%81%AE%E5%86%99%E7%9C%9F%E3%82%92%E3%81%82%E3%81%95%E3%81%A3%E3%81%A6%E8%A8%98%E6%86%B6%E3%82%92%E9%A0%BC%E3%82%8A%E3%81%AB%E3%83%AC%E3%82%B7%E3%83%94%E3%82%92%E6%8A%95%E7%A8%BF%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B_%E3%83%9F%E3%83%BC%E3%83%88%E3%82%BD%E3%83%BC%E3%82%B9%E7%B7%A8/","title":"スマホの写真をあさって記憶を頼りにレシピを投稿してみる_ミートソース編"},{"content":"はじめまして。\nむーさんとここでは名乗ることにします。\nいつかやろうと思っていたBlogをやっと始めました！ よろしくお願いします。\n自己紹介のページは更新途中なんですけど、\nちょっと殴りがいてみますね。\n今は28歳ほどで、訳あって現在無職ですｗ\n元正社員のプログラマーでしたが今年退職しています。\n前世は蟻だと思うほど甘いもの狂で、\n自分でお菓子作りをちょいちょいしてます。\nこのブログの今後に関してですが、 今記事にしようかなと検討しているものは以下です！\nすべて書くかはわからかないですが、ぜひご期待ください！！\n ブログ運営方法、1月ごとの収益 プログラマー向けの情報 ガジェット・家電レビュー  Mi band 5 食洗器 ティファール電気圧力鍋 etc\u0026hellip;   料理レシピ 一人暮らし向けの簡単レシピから作り置き、本格洋菓子などを今考えています。 アプリレビュー(最近よく使ってるもの)  CookPadMart 自転車アプリ etc    もちろんこの記事書いてほしいなどあれば是非コメントなどください！\n","date":"2021-06-05T20:55:04+09:00","permalink":"https://shortbread2329.github.io/p/%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E9%81%85%E3%81%84%E3%81%91%E3%81%A9%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B%E3%81%A8%E3%81%93%E3%82%8C%E3%81%8B%E3%82%89/","title":"ちょっと遅いけど自己紹介とこれから"},{"content":"あー今日はなんだか自炊するのだるいなー\n雨も降っていて買い物に行けないなー\nこの時期ってそんな気分にどうしてかなってしまいます。\nでも栄養あるものとらないとなあどうしようかなあ・・・\nと思っているとピンポンとともに、\n「ヨドバシ電気でーす」と声が。\n何ぽちったんだっけ・・・\n私は国産素材の豆板醤を買うついでにどうやら、\nケール青汁を購入していたらしい。\n昨日深夜の私は、何を考えていたのだろうか。\n正直記憶にない。\n 2021-06-04-12-59-46-101 \n簡単に野菜取れないかなあと思って青汁を買うのはこれで3種類目ぐらいかなあ。\n今まで買っていた2種類は大麦若葉が主成分で、\nなんだかまずくはないけど味が無いかも？みたいな味で、 飲みやすく水に溶けやすいけど食物繊維が中心感があったので、\nビタミンだとかポリフェノールもとれるそうなこれを試しに。\n早速お水に溶かしてみます。\n 2021-06-04-12-59-46-101 \nマドラーで混ぜたら10秒ほどで溶け切りました。\n溶けやすさって粉末飲料では大事です！  2021-06-04-12-59-46-101 \nそして気になるのは味ですよね！\nでは飲んでみます・・・\n最初はやっぱり無味かなと感じたのですけど\n後味がブロッコリーでした。\n青汁はまずくもおいしくもないものが正直多いようなと思います。\nそれが少しマイブームでもありますｗ\n","date":"2021-06-04T13:29:06+09:00","image":"https://shortbread2329.github.io/p/%E8%87%AA%E7%82%8A%E3%81%A0%E3%82%8B%E3%81%84%E3%81%AE%E3%81%A7%E9%9D%92%E6%B1%81%E3%82%92%E3%81%BD%E3%81%A1%E3%82%8B/2021-06-04-12-59-46-101_hue3fe1cbf6eda8f91f9cbaa54b61173b1_1553281_120x120_fill_q75_box_smart1.jpg","permalink":"https://shortbread2329.github.io/p/%E8%87%AA%E7%82%8A%E3%81%A0%E3%82%8B%E3%81%84%E3%81%AE%E3%81%A7%E9%9D%92%E6%B1%81%E3%82%92%E3%81%BD%E3%81%A1%E3%82%8B/","title":"自炊だるいので青汁をぽちる"},{"content":"あーブログ始めないとなあ\nでもちゃんと作るとサーバー維持費用かかりそうだし、\n簡単に作ると多くは広告をつけることができないし、\nどうすればいいんだろうなあと考えていた時にいいやり方を見つけました！\n今回のやり方であれば\n独自ドメインのブログをgithub管理で運営できそうです。\nではさっそくやり方を記事にまとめます！\n導入手順 前提の環境はWindows、gitとgoを事前にインストールしている状態です。\nHugoのインストールからブログ作成まで PowerShellを立ち上げます。\n以下コマンドを実行してまずscoopをインストールします。\nSet-ExecutionPolicy RemoteSigned iex (New-Object net.webclient).downloadstring(\u0026#39;https://get.scoop.sh\u0026#39;) このscoopはWindows用コマンドラインインストーラーです。 このインストーラーを使ってhugoとhugo-extendedをインストールします。\nscoop install hugo scoop install hugo-extended Hugoとは ざっくりいうと、レイアウトがある程度整ったサイトをすぐに作れるやつです。\n同じ用途のサービスとしてWordPressが有名かと思います。\n違いは動的サイト、自由度の高いサイトがWordPressでできる点に対し、\nHugoは静的サイト、事前に作成したテンプレートデザインに従ったサイトができます。\n例えばブログであればマークダウンファイルを配置しコマンドを実行すると公開用ファイルが生成されます。\n本体 ├── 設定ファイル ├── マークダウンで書いた記事① └── 公開用ファイル③ コマンドを実行② Hugoのテンプレートデザイン https://themes.gohugo.io\n今回はhugo-future-imperfect-slimを使用しています。\nプロジェクト作成 ワークディレクトリにて以下のコマンドを実行するだけです。\nhugo new site blog この時点でGithubの設定も行います。 先に、GitHub上で空のリポジトリ(ここでは blog)を作り、リモートURL登録をします。\n$ cd blog $ git init $ git remote add origin https://github.com/shortBread2329/blog.git テーマをSubmoduleで登録 git submoduleコマンドを使うことで、外部のgitリポジトリを自分のgitリポジトリのサブディレクトリに登録できます。\nこのコマンドを使うことで、テンプレートデザインをダウンロードすることなく、githubから参照させることができます。\n$ git submodule add https://github.com/pacollins/hugo-future-imperfect-slim.git themes/hugo-future-imperfect-slim $ git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 次回はテーマの設定の続きを記事にします。乞うご期待 ","date":"2021-06-02T09:34:11+09:00","permalink":"https://shortbread2329.github.io/p/githubpage-hugo-%E3%81%A7%E6%9C%80%E5%BC%B7%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E4%BD%9C%E3%82%8D%E3%81%861/3/","title":"GitHubPage + Hugo で最強ブログを作ろう(1/3)"}]