<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>プログラミング on むーさんDiary</title>
    <link>https://shortbread2329.github.io/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
    <description>Recent content in プログラミング on むーさんDiary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 05 Aug 2021 10:27:45 +0900</lastBuildDate><atom:link href="https://shortbread2329.github.io/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>このブログにGoogleアナリティクスを導入してみた</title>
      <link>https://shortbread2329.github.io/p/%E3%81%93%E3%81%AE%E3%83%96%E3%83%AD%E3%82%B0%E3%81%ABgoogle%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B9%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Thu, 05 Aug 2021 10:27:45 +0900</pubDate>
      
      <guid>https://shortbread2329.github.io/p/%E3%81%93%E3%81%AE%E3%83%96%E3%83%AD%E3%82%B0%E3%81%ABgoogle%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B9%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>googleアナリティクスとは基本無料のサイト解析サービスでして、
登録したサイトへアクセスしたユーザーがとった行動に関するデータが見れます。例えば、
「サイトの訪問者数はどれくらいか」
「どのページがよく見られているのか」
「訪問者はどこから来たのか」
「使われたデバイスはスマホかパソコンか」
などなどです。
googleアナリティクスの始め方 1) Googleアカウントを作成しログインしておく とはいっても既に持っている人が多いと思うので割愛します。
2) Googleアナリティクスアカウントを作成 次にGoogleアナリティクスアカウントを作成します。ここでは分析したいサイトのURLなどを入力し、トラッキングコードと呼ばれるタグを取得します。 このトラッキングコードをページのHTMLに設置し、それが読み込まれることで、Googleアナリティクスでデータを計測できるようになります。
3) トラッキングコードを設置 最後に、先ほど取得したトラッキングコードを全てのページに設置します。
またHUGOでブログを作っている方は、トラッキングコード内のトラッキングIDをコピーし「config.yaml」などのconfigファイルに以下を追記しコンパイルすると完了します。
# GA Tracking IDgoogleAnalytics:&amp;#34;UA-123456789-1&amp;#34;#トラッキングIDを入力Googleアナリティクスの使い方 | 必須の4機能 導入が完了したら、実際にGoogleアナリティクスを使ってみましょう。 Googleアナリティクスは項目が多くて一見複雑そうですが、実はチェックするべき機能はたったの4つです。 以下では、「ユーザー」「集客」「行動」「コンバージョン」という基本的な機能について概要を説明していきます。
1) 「ユーザー」メニュー まずは「ユーザー」です。 このメニューでは、サイトの訪問数(セッション数)やページビュー数、使用しているデバイスなど、ユーザーに関する幅広いデータを見ることができます。
まずは「概要」をクリックしてみてください。
 image-20210805113010113 
アクセス解析において、まずはこの「概要」ページでサイト全体の訪問者数を確認することがはじめの一歩となります。 その後ページ毎の分析の際にも、サイト全体の平均と比べてどうなのか、という視点が大事です。 アクセス解析において最もお世話になるのがこの「概要」メニューと言っても差し支えないでしょう。
次に、「モバイル」&amp;gt;「概要」をクリックしてみてましょう。
 image-20210805113032306 
ここではユーザーの使用しているデバイス(パソコン・スマホ)が何なのかがわかります。 この項目をきちんとチェックすることで、施策の優先度を見極めることができます。 たとえばスマホユーザーが多いので、スマホ用サイトを優先的に改善するなどの意思決定ができます。
2) 「集客」メニュー 「集客」メニューでは、ユーザーサイトにどこから訪れたかがわかります。 具体的には、「Google検索で流入した」「Facebook広告から流入した」などがわかります。
「集客」&amp;gt;「すべてのトラフィック」&amp;gt;「チャネル」を確認してみましょう。
 image-20210805113057889 
「集客」チャネルでは以下のデータを確認することができます。
   Organic Search Google、Yahooなどで検索してサイトに流入した訪問     Paid Search 検索後、リスティング広告などをクリックしてサイトに流入した訪問   Direct URLを直接入力したり、ブックマークからサイトに流入した訪問   Referral 他のサイトのリンクをクリックしてサイトに流入した訪問   Social FacebookやTwitterなどのSNSからサイトに流入にした訪問   Display バナー広告をクリックしてサイトに流入した訪問   Other その他    3) 「行動」メニュー 「集客」メニューがユーザーのサイト訪問前の行動を確認するために役立つのに対して、「行動」メニューではユーザーのサイト内での行動データをチェックできます。 まずは「サイトコンテンツ」&amp;gt;「すべてのページ」を見てみましょう。</description>
    </item>
    
    <item>
      <title>用途別、データ分析の考え方</title>
      <link>https://shortbread2329.github.io/p/%E7%94%A8%E9%80%94%E5%88%A5%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9/</link>
      <pubDate>Wed, 04 Aug 2021 13:24:53 +0900</pubDate>
      
      <guid>https://shortbread2329.github.io/p/%E7%94%A8%E9%80%94%E5%88%A5%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9/</guid>
      <description>投資データなどの分析をしてみたいなあと考えて調べてまとめてみました。
用途別で記載しています。
仮説を立ててみる 一見関連性のない複数の事象が共起している場合、そこに何かしらの要因が隠れていることが多いです。これをアソシエーション分析と言います。
例えば、「紙おむつとビールが同時に購入される確率がなぜか多い」や「Webサイトで会員登録するユーザーは登録前になぜかWikipediaを見ている可能性が高い」といった感じです。
アソシエーション分析では複数の事象の関連性を見つけ出し、仮説を立て、経営戦略やマーケティングに活かすことが出来ます。
アンケートを取って分類する アンケート調査における設問に対し、回答者の属性などの項目を交えて集計するデータ分析手法です。クロス集計分析と言います。
クロス集計分析を用いることでユーザーの属性ごとの平均値を知ることが出来ます。
複数のデータを要約する いくつかの変数を組み合わせて、少数の変数にまとめる手法です。主成分分析と呼ばれ、データを要約するのに用いられる代表的な手法です。
この変数を組み合わせることを、変数を合成するといいます。そして合成されて新しくできた変数を主成分と呼びます。下図は主成分分析のイメージ図です。ピンク部分を作り出すのが、主成分分析のゴールになります。</description>
    </item>
    
    <item>
      <title>pythonで自作関数をモジュール化・パッケージ化</title>
      <link>https://shortbread2329.github.io/p/python%E3%81%A7%E8%87%AA%E4%BD%9C%E9%96%A2%E6%95%B0%E3%82%92%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E5%8C%96%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E5%8C%96/</link>
      <pubDate>Sat, 31 Jul 2021 21:58:40 +0900</pubDate>
      
      <guid>https://shortbread2329.github.io/p/python%E3%81%A7%E8%87%AA%E4%BD%9C%E9%96%A2%E6%95%B0%E3%82%92%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E5%8C%96%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E5%8C%96/</guid>
      <description>pythonで自作関数をモジュール化・パッケージ化 私がTwitterAPIを叩く処理を実装していた際にライブラリ化したくなったのでまとめてみます。
前提条件  Python 3.0以上  構成ディレクトリ 以下のようなフォルダとファイルを作成していきます。
./mylibrary --- /mylibrary ---/__init__.py file1.py file2.py --- /setup.py   mylibraryフォルダ
ライブラリ化したいソースをここに配置していきます。
  _init_.py
from .file1 import class1 from .file2 import class2 from .file3 import *   setup.py
インストール時の構成を記述するファイルです。
setup.pyの書き方は、本来はもっといろいろと書くべきのようですが、
今回は公開することを考えず最小限で行きます。
  from setuptools import setup setup( install_requires=[], entry_points={ &amp;#34;console_scripts&amp;#34;:[ &amp;#34;myapp = test:ggg&amp;#34; ] } )  install_requires  importしている依存ライブラリをリストで羅列する &amp;ldquo;sys&amp;quot;など標準ライブラリを書くとエラーになる    完成したライブラリのインストール あとはライブラリをインストールするだけです.
python setup.py install お疲れ様でした!</description>
    </item>
    
    <item>
      <title>ローカルのみのGitリポジトリをつくろう</title>
      <link>https://shortbread2329.github.io/p/%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AE%E3%81%BF%E3%81%AEgit%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8D%E3%81%86/</link>
      <pubDate>Sun, 18 Jul 2021 00:10:06 +0900</pubDate>
      
      <guid>https://shortbread2329.github.io/p/%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AE%E3%81%BF%E3%81%AEgit%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8D%E3%81%86/</guid>
      <description>ソース管理をするといえばGitとGithubが主流なのかなというご時世ですが、
そもそもソースを管理できればいいだけで公開する必要はない時もあるかと思います。
そんな時に実は簡単にできるので是非活用してみてください。
 リモートリポジトリを作成する(ローカル環境で) mkdir .git cd .git git init --bare --shared オプションの解説
–bare：カレントディレクトリ配下のソースをリモートリポジトリにする。
–share：このリポジトリを共有可能にする。
​</description>
    </item>
    
    <item>
      <title>GitHubPage &#43; Hugo で最強ブログを作ろう(1/3)</title>
      <link>https://shortbread2329.github.io/p/githubpage-hugo-%E3%81%A7%E6%9C%80%E5%BC%B7%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E4%BD%9C%E3%82%8D%E3%81%861/3/</link>
      <pubDate>Wed, 02 Jun 2021 09:34:11 +0900</pubDate>
      
      <guid>https://shortbread2329.github.io/p/githubpage-hugo-%E3%81%A7%E6%9C%80%E5%BC%B7%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E4%BD%9C%E3%82%8D%E3%81%861/3/</guid>
      <description>あーブログ始めないとなあ
でもちゃんと作るとサーバー維持費用かかりそうだし、
簡単に作ると多くは広告をつけることができないし、
どうすればいいんだろうなあと考えていた時にいいやり方を見つけました！
今回のやり方であれば
独自ドメインのブログをgithub管理で運営できそうです。
ではさっそくやり方を記事にまとめます！
導入手順 前提の環境はWindows、gitとgoを事前にインストールしている状態です。
Hugoのインストールからブログ作成まで PowerShellを立ち上げます。
以下コマンドを実行してまずscoopをインストールします。
Set-ExecutionPolicy RemoteSigned iex (New-Object net.webclient).downloadstring(&amp;#39;https://get.scoop.sh&amp;#39;) このscoopはWindows用コマンドラインインストーラーです。 このインストーラーを使ってhugoとhugo-extendedをインストールします。
scoop install hugo scoop install hugo-extended Hugoとは ざっくりいうと、レイアウトがある程度整ったサイトをすぐに作れるやつです。
同じ用途のサービスとしてWordPressが有名かと思います。
違いは動的サイト、自由度の高いサイトがWordPressでできる点に対し、
Hugoは静的サイト、事前に作成したテンプレートデザインに従ったサイトができます。
例えばブログであればマークダウンファイルを配置しコマンドを実行すると公開用ファイルが生成されます。
本体 ├── 設定ファイル ├── マークダウンで書いた記事① └── 公開用ファイル③ コマンドを実行② Hugoのテンプレートデザイン https://themes.gohugo.io
今回はhugo-future-imperfect-slimを使用しています。
プロジェクト作成 ワークディレクトリにて以下のコマンドを実行するだけです。
hugo new site blog この時点でGithubの設定も行います。 先に、GitHub上で空のリポジトリ(ここでは blog)を作り、リモートURL登録をします。
$ cd blog $ git init $ git remote add origin https://github.com/shortBread2329/blog.git テーマをSubmoduleで登録 git submoduleコマンドを使うことで、外部のgitリポジトリを自分のgitリポジトリのサブディレクトリに登録できます。
このコマンドを使うことで、テンプレートデザインをダウンロードすることなく、githubから参照させることができます。
$ git submodule add https://github.</description>
    </item>
    
  </channel>
</rss>
