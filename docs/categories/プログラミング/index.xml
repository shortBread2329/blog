<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>プログラミング on むーさんDiary</title>
    <link>https://shortbread2329.github.io/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
    <description>Recent content in プログラミング on むーさんDiary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 04 Aug 2021 13:24:53 +0900</lastBuildDate><atom:link href="https://shortbread2329.github.io/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用途別、データ分析の考え方</title>
      <link>https://shortbread2329.github.io/p/%E7%94%A8%E9%80%94%E5%88%A5%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9/</link>
      <pubDate>Wed, 04 Aug 2021 13:24:53 +0900</pubDate>
      
      <guid>https://shortbread2329.github.io/p/%E7%94%A8%E9%80%94%E5%88%A5%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9/</guid>
      <description>投資データなどの分析をしてみたいなあと考えて調べてまとめてみました。
用途別で記載しています。
仮説を立ててみる 一見関連性のない複数の事象が共起している場合、そこに何かしらの要因が隠れていることが多いです。これをアソシエーション分析と言います。
例えば、「紙おむつとビールが同時に購入される確率がなぜか多い」や「Webサイトで会員登録するユーザーは登録前になぜかWikipediaを見ている可能性が高い」といった感じです。
アソシエーション分析では複数の事象の関連性を見つけ出し、仮説を立て、経営戦略やマーケティングに活かすことが出来ます。
アンケートを取って分類する アンケート調査における設問に対し、回答者の属性などの項目を交えて集計するデータ分析手法です。クロス集計分析と言います。
クロス集計分析を用いることでユーザーの属性ごとの平均値を知ることが出来ます。
複数のデータを要約する いくつかの変数を組み合わせて、少数の変数にまとめる手法です。主成分分析と呼ばれ、データを要約するのに用いられる代表的な手法です。
この変数を組み合わせることを、変数を合成するといいます。そして合成されて新しくできた変数を主成分と呼びます。下図は主成分分析のイメージ図です。ピンク部分を作り出すのが、主成分分析のゴールになります。</description>
    </item>
    
    <item>
      <title>pythonで自作関数をモジュール化・パッケージ化</title>
      <link>https://shortbread2329.github.io/p/python%E3%81%A7%E8%87%AA%E4%BD%9C%E9%96%A2%E6%95%B0%E3%82%92%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E5%8C%96%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E5%8C%96/</link>
      <pubDate>Sat, 31 Jul 2021 21:58:40 +0900</pubDate>
      
      <guid>https://shortbread2329.github.io/p/python%E3%81%A7%E8%87%AA%E4%BD%9C%E9%96%A2%E6%95%B0%E3%82%92%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E5%8C%96%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E5%8C%96/</guid>
      <description>pythonで自作関数をモジュール化・パッケージ化 私がTwitterAPIを叩く処理を実装していた際にライブラリ化したくなったのでまとめてみます。
前提条件  Python 3.0以上  構成ディレクトリ 以下のようなフォルダとファイルを作成していきます。
./mylibrary --- /mylibrary ---/__init__.py file1.py file2.py --- /setup.py   mylibraryフォルダ
ライブラリ化したいソースをここに配置していきます。
  _init_.py
from .file1 import class1 from .file2 import class2 from .file3 import *   setup.py
インストール時の構成を記述するファイルです。
setup.pyの書き方は、本来はもっといろいろと書くべきのようですが、
今回は公開することを考えず最小限で行きます。
  from setuptools import setup setup( install_requires=[], entry_points={ &amp;#34;console_scripts&amp;#34;:[ &amp;#34;myapp = test:ggg&amp;#34; ] } )  install_requires  importしている依存ライブラリをリストで羅列する &amp;ldquo;sys&amp;quot;など標準ライブラリを書くとエラーになる    完成したライブラリのインストール あとはライブラリをインストールするだけです.
python setup.py install お疲れ様でした!</description>
    </item>
    
    <item>
      <title>ローカルのみのGitリポジトリをつくろう</title>
      <link>https://shortbread2329.github.io/p/%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AE%E3%81%BF%E3%81%AEgit%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8D%E3%81%86/</link>
      <pubDate>Sun, 18 Jul 2021 00:10:06 +0900</pubDate>
      
      <guid>https://shortbread2329.github.io/p/%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AE%E3%81%BF%E3%81%AEgit%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8D%E3%81%86/</guid>
      <description>ソース管理をするといえばGitとGithubが主流なのかなというご時世ですが、
そもそもソースを管理できればいいだけで公開する必要はない時もあるかと思います。
そんな時に実は簡単にできるので是非活用してみてください。
 リモートリポジトリを作成する(ローカル環境で) mkdir .git cd .git git init --bare --shared オプションの解説
–bare：カレントディレクトリ配下のソースをリモートリポジトリにする。
–share：このリポジトリを共有可能にする。
​</description>
    </item>
    
  </channel>
</rss>
