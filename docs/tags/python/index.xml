<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on むーさんDiary</title>
    <link>https://shortbread2329.github.io/tags/python/</link>
    <description>Recent content in python on むーさんDiary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 09 Aug 2021 23:35:50 +0900</lastBuildDate><atom:link href="https://shortbread2329.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SeleniumWebdriverチートシート</title>
      <link>https://shortbread2329.github.io/p/seleniumwebdriver%E3%83%81%E3%83%BC%E3%83%88%E3%82%B7%E3%83%BC%E3%83%88/</link>
      <pubDate>Mon, 09 Aug 2021 23:35:50 +0900</pubDate>
      
      <guid>https://shortbread2329.github.io/p/seleniumwebdriver%E3%83%81%E3%83%BC%E3%83%88%E3%82%B7%E3%83%BC%E3%83%88/</guid>
      <description>特定のURLでブラウザを起動する Java
driver.get(&amp;quot;URL&amp;quot;); C#
driver.Url = &amp;quot;URL&amp;quot;; Python
driver.get(&amp;quot;URL&amp;quot;) Ruby
driver.get(&amp;quot;URL&amp;quot;) ページ遷移したいとき Java
driver.navigate().to(&amp;quot;URL&amp;quot;); C#
driver.Navigate().GoToUrl(&amp;quot;URL&amp;quot;); Python
driver.get(&amp;quot;URL&amp;quot;) Ruby
driver.navigate.to(&amp;quot;URL&amp;quot;) 一つ前に戻りたいとき Java
driver.navigate().back(); C#
driver.Navigate().Back(); Python
driver.back() Ruby
driver.navigate.back 一つ前に進みたいとき Java
driver.navigate().forward(); C#
driver.Navigate().Forward(); Python
driver.forward() Ruby
driver.navigate.forward ブラウザを更新する Java
driver.navigate().refresh(); C#
driver.Navigate().Refresh(); Python
driver.refresh() Ruby
driver.navigate.refresh 現在のURLを知りたいとき Java
driver.getCurrentUrl() C#
driver.Url; Python
driver.current_url Ruby
driver.current_url タイトルを知りたいとき Java
driver.getTitle(): C#
driver.Title; Python
driver.title Ruby
driver.title ページのソースを取得したいとき Java
driver.getPageSource(); C#
driver.PageSource; Python</description>
    </item>
    
    <item>
      <title>pythonで自作関数をモジュール化・パッケージ化</title>
      <link>https://shortbread2329.github.io/p/python%E3%81%A7%E8%87%AA%E4%BD%9C%E9%96%A2%E6%95%B0%E3%82%92%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E5%8C%96%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E5%8C%96/</link>
      <pubDate>Sat, 31 Jul 2021 21:58:40 +0900</pubDate>
      
      <guid>https://shortbread2329.github.io/p/python%E3%81%A7%E8%87%AA%E4%BD%9C%E9%96%A2%E6%95%B0%E3%82%92%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E5%8C%96%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E5%8C%96/</guid>
      <description>pythonで自作関数をモジュール化・パッケージ化 私がTwitterAPIを叩く処理を実装していた際にライブラリ化したくなったのでまとめてみます。
前提条件  Python 3.0以上  構成ディレクトリ 以下のようなフォルダとファイルを作成していきます。
./mylibrary --- /mylibrary ---/__init__.py file1.py file2.py --- /setup.py   mylibraryフォルダ
ライブラリ化したいソースをここに配置していきます。
  _init_.py
from .file1 import class1 from .file2 import class2 from .file3 import *   setup.py
インストール時の構成を記述するファイルです。
setup.pyの書き方は、本来はもっといろいろと書くべきのようですが、
今回は公開することを考えず最小限で行きます。
  from setuptools import setup setup( install_requires=[], entry_points={ &amp;#34;console_scripts&amp;#34;:[ &amp;#34;myapp = test:ggg&amp;#34; ] } )  install_requires  importしている依存ライブラリをリストで羅列する &amp;ldquo;sys&amp;quot;など標準ライブラリを書くとエラーになる    完成したライブラリのインストール あとはライブラリをインストールするだけです.
python setup.py install お疲れ様でした!</description>
    </item>
    
  </channel>
</rss>
